/*
	TDUser.h
	The implementation of properties and methods for the TDUser object.
	Generated by SudzC.com
*/
#import "TDUser.h"

#import "TDZone.h"
@implementation TDUser
	@synthesize Code = _Code;
	@synthesize Name = _Name;
	@synthesize Zones = _Zones;
    //@synthesize Zones ;
	@synthesize Error = _Error;
	@synthesize MacAddress = _MacAddress;

	- (id) init
	{
		if(self = [super init])
		{
			self.Name = nil;
			self.Zones = nil; // [[TDZone alloc] init];
			self.Error = nil;
			self.MacAddress = nil;

		}
		return self;
	}

	+ (TDUser*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		// оригинал
        return [[self alloc] initWithNode: node];
        
        /*
        //->
        SoapArray *array = [[SoapArray alloc] init];
        for (CXMLNode* child in [node children]){
            [array addObject:[[self alloc] initWithNode:child]];
        }
        return array;
        //<-
        */
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.Code = [[Soap getNodeValue: node withName: @"Code"] intValue];
			self.Name = [Soap getNodeValue: node withName: @"Name"];
			
            
            // нужен цикл по тегам "Zones"
            // получеает только один node с тегом Zones
            //self.Zones = [[TDZone createWithNode: [Soap getNode: node withName: @"Zones"]] object];
            //NSLog(@" отладка ZZZZ [Soap getNode: node withName: @'Zones']=%@", [Soap getNode: node withName: @"Zones"]);
            self.Zones = [[TDZone createWithNode:node] object];
            NSLog(@" отладка ZZZZ node=%@", node);
            
           /*
            NSArray *array = [Soap findNodes:node xpath:@"/Zones"];
            
            for (int i=0; i < array.count; i++) {
                NSLog(@"   [array objectAtIndex:i]=%@", [array objectAtIndex:i]);
            }
           */ 
            
            /*
            NSLog(@"### node=%@",node);
            for (CXMLNode* child in [node children]){
                if (child.name == @"Zones") {
                   NSLog(@"   !!!! child=%@", child);
                }
            }
            */
                        
            
            
            
			self.Error = [Soap getNodeValue: node withName: @"Error"];
			self.MacAddress = [Soap getNodeValue: node withName: @"MacAddress"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"User"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		[s appendFormat: @"<Code>%@</Code>", [NSString stringWithFormat: @"%i", self.Code]];
		if (self.Name != nil) [s appendFormat: @"<Name>%@</Name>", [[self.Name stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Zones != nil) [s appendString: [self.Zones serialize: @"Zones"]];
		if (self.Error != nil) [s appendFormat: @"<Error>%@</Error>", [[self.Error stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.MacAddress != nil) [s appendFormat: @"<MacAddress>%@</MacAddress>", [[self.MacAddress stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[TDUser class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
